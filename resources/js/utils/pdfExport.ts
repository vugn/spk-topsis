/* eslint-disable @typescript-eslint/no-explicit-any */
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import html2canvas from 'html2canvas';

// Interfaces
interface Alternative {
    id: number;
    name: string;
    description?: string;
}

interface Criterion {
    id: number;
    name: string;
    description?: string;
    weight: number | string;
    type: 'benefit' | 'cost';
}

interface Evaluation {
    id: number;
    alternative_id: number;
    criterion_id: number;
    value: number;
    alternative: Alternative;
    criterion: Criterion;
}

interface TopsisResult {
    id: number;
    alternative_id?: number;
    positive_distance?: number | string;
    negative_distance?: number | string;
    distance_positive?: number | string;
    distance_negative?: number | string;
    preference_score: number | string;
    rank: number;
    alternative: Alternative;
}

// Helper function to add header to PDF
const addPDFHeader = (doc: jsPDF, title: string) => {
    const pageWidth = doc.internal.pageSize.width;

    // Title
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text(title, pageWidth / 2, 20, { align: 'center' });

    // Subtitle
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text('Sistem Pendukung Keputusan - Metode TOPSIS', pageWidth / 2, 30, { align: 'center' });

    // Date
    doc.setFontSize(10);
    doc.text(`Tanggal: ${new Date().toLocaleDateString('id-ID')}`, pageWidth / 2, 40, { align: 'center' });

    return 50; // Return Y position for content
};

// Helper function to add footer to PDF
const addPDFFooter = (doc: jsPDF) => {
    const pageHeight = doc.internal.pageSize.height;
    const pageWidth = doc.internal.pageSize.width;

    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text('Generated by SPK TOPSIS Application', pageWidth / 2, pageHeight - 10, { align: 'center' });
};

// Export Alternatives to PDF
export const exportAlternativesPDF = (alternatives: Alternative[]) => {
    const doc = new jsPDF();
    const startY = addPDFHeader(doc, 'Data Alternatif');

    const tableData = alternatives.map((alt, index) => [
        index + 1,
        alt.name,
        alt.description || '-'
    ]);

    autoTable(doc, {
        head: [['No', 'Nama Alternatif', 'Deskripsi']],
        body: tableData,
        startY: startY,
        theme: 'grid',
        styles: {
            fontSize: 10,
            cellPadding: 5,
        },
        headStyles: {
            fillColor: [59, 130, 246], // Blue
            textColor: 255,
            fontStyle: 'bold'
        },
        columnStyles: {
            0: { halign: 'center', cellWidth: 20 },
            1: { cellWidth: 60 },
            2: { cellWidth: 100 }
        }
    });

    addPDFFooter(doc);
    doc.save('Alternatif-SPK-TOPSIS.pdf');
};

// Export Criteria to PDF
export const exportCriteriaPDF = (criteria: Criterion[]) => {
    const doc = new jsPDF();
    const startY = addPDFHeader(doc, 'Data Kriteria');

    const tableData = criteria.map((crit, index) => [
        index + 1,
        crit.name,
        crit.description || '-',
        (Number(crit.weight) * 100).toFixed(1) + '%',
        crit.type === 'benefit' ? 'Benefit' : 'Cost'
    ]);

    autoTable(doc, {
        head: [['No', 'Nama Kriteria', 'Deskripsi', 'Bobot', 'Tipe']],
        body: tableData,
        startY: startY,
        theme: 'grid',
        styles: {
            fontSize: 10,
            cellPadding: 5,
        },
        headStyles: {
            fillColor: [34, 197, 94], // Green
            textColor: 255,
            fontStyle: 'bold'
        },
        columnStyles: {
            0: { halign: 'center', cellWidth: 20 },
            1: { cellWidth: 50 },
            2: { cellWidth: 70 },
            3: { halign: 'center', cellWidth: 25 },
            4: { halign: 'center', cellWidth: 25 }
        }
    });

    // Add summary
    const finalY = (doc as any).lastAutoTable?.finalY || startY + 50;
    const totalWeight = criteria.reduce((sum, c) => sum + Number(c.weight), 0);

    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Ringkasan:', 20, finalY + 20);

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(`Total Bobot: ${(Number(totalWeight) * 100).toFixed(1)}%`, 20, finalY + 30);
    doc.text(`Jumlah Kriteria Benefit: ${criteria.filter(c => c.type === 'benefit').length}`, 20, finalY + 40);
    doc.text(`Jumlah Kriteria Cost: ${criteria.filter(c => c.type === 'cost').length}`, 20, finalY + 50);

    addPDFFooter(doc);
    doc.save('Kriteria-SPK-TOPSIS.pdf');
};

// Export Evaluation Matrix to PDF
export const exportEvaluationsPDF = (alternatives: Alternative[], criteria: Criterion[], evaluations: Evaluation[]) => {
    const doc = new jsPDF('landscape'); // Use landscape for wide matrix
    const startY = addPDFHeader(doc, 'Matriks Evaluasi');

    // Create evaluation matrix
    const matrix: { [key: string]: number } = {};
    evaluations.forEach(evaluation => {
        const key = `${evaluation.alternative_id}-${evaluation.criterion_id}`;
        matrix[key] = evaluation.value;
    });

    // Prepare table data
    const headerRow = ['Alternatif', ...criteria.map(c => c.name)];
    const tableData = alternatives.map(alt => {
        const row = [alt.name];
        criteria.forEach(crit => {
            const key = `${alt.id}-${crit.id}`;
            row.push(matrix[key]?.toString() || '-');
        });
        return row;
    });

    autoTable(doc, {
        head: [headerRow],
        body: tableData,
        startY: startY,
        theme: 'grid',
        styles: {
            fontSize: 9,
            cellPadding: 3,
        },
        headStyles: {
            fillColor: [168, 85, 247], // Purple
            textColor: 255,
            fontStyle: 'bold'
        },
        columnStyles: {
            0: { cellWidth: 40, fontStyle: 'bold' }, // Alternative names
        }
    });

    // Add criteria info
    const finalY = (doc as any).lastAutoTable?.finalY || startY + 50;

    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Informasi Kriteria:', 20, finalY + 20);

    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    let yPos = finalY + 30;

    criteria.forEach((crit, index) => {
        const text = `${index + 1}. ${crit.name} (${crit.type === 'benefit' ? 'Benefit' : 'Cost'}) - Bobot: ${(Number(crit.weight) * 100).toFixed(1)}%`;
        doc.text(text, 20, yPos);
        yPos += 10;
    });

    addPDFFooter(doc);
    doc.save('Evaluasi-SPK-TOPSIS.pdf');
};

// Export TOPSIS Results to PDF
export const exportTopsisResultsPDF = (results: TopsisResult[], criteria: Criterion[]) => {
    const doc = new jsPDF();
    const startY = addPDFHeader(doc, 'Hasil Perhitungan TOPSIS');

    // Sort results by rank
    const sortedResults = [...results].sort((a, b) => a.rank - b.rank);

    const tableData = sortedResults.map((result) => {
        const positiveDistance = result.positive_distance || result.distance_positive || 0;
        const negativeDistance = result.negative_distance || result.distance_negative || 0;

        return [
            result.rank,
            result.alternative.name,
            Number(positiveDistance).toFixed(4),
            Number(negativeDistance).toFixed(4),
            Number(result.preference_score).toFixed(4)
        ];
    });

    autoTable(doc, {
        head: [['Peringkat', 'Alternatif', 'D+', 'D-', 'Skor Preferensi']],
        body: tableData,
        startY: startY,
        theme: 'grid',
        styles: {
            fontSize: 10,
            cellPadding: 5,
        },
        headStyles: {
            fillColor: [239, 68, 68], // Red
            textColor: 255,
            fontStyle: 'bold'
        },
        columnStyles: {
            0: { halign: 'center', cellWidth: 25 },
            1: { cellWidth: 60 },
            2: { halign: 'center', cellWidth: 30 },
            3: { halign: 'center', cellWidth: 30 },
            4: { halign: 'center', cellWidth: 35, fontStyle: 'bold' }
        },
        didParseCell: function(data) {
            // Highlight the best alternative (rank 1)
            if (data.row.index === 0 && data.section === 'body') {
                data.cell.styles.fillColor = [254, 240, 138]; // Light yellow
            }
        }
    });

    // Add analysis
    const finalY = (doc as any).lastAutoTable?.finalY || startY + 50;
    const bestAlternative = sortedResults[0];

    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Analisis Hasil:', 20, finalY + 20);

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(`Alternatif terbaik: ${bestAlternative.alternative.name}`, 20, finalY + 35);
    doc.text(`Skor preferensi: ${Number(bestAlternative.preference_score).toFixed(4)}`, 20, finalY + 45);
    doc.text(`Total alternatif yang dievaluasi: ${results.length}`, 20, finalY + 55);
    doc.text(`Total kriteria yang digunakan: ${criteria.length}`, 20, finalY + 65);

    // Add criteria summary
    doc.text('Kriteria yang digunakan:', 20, finalY + 80);
    let yPos = finalY + 90;
    criteria.forEach((crit, index) => {
        const text = `${index + 1}. ${crit.name} (${crit.type === 'benefit' ? 'Benefit' : 'Cost'}) - ${(Number(crit.weight) * 100).toFixed(1)}%`;
        doc.text(text, 25, yPos);
        yPos += 10;
    });

    addPDFFooter(doc);
    doc.save('Hasil-TOPSIS-SPK.pdf');
};

// Export Chart as PDF with improved compatibility
export const exportChartPDF = async (chartElementId: string, title: string) => {
    try {
        const chartElement = document.getElementById(chartElementId);
        if (!chartElement) {
            alert('Chart tidak ditemukan');
            return;
        }

        // Try different approaches for chart capture
        let canvas: HTMLCanvasElement;

        try {
            // Method 1: Simple capture with basic options
            canvas = await html2canvas(chartElement, {
                backgroundColor: '#ffffff',
                scale: 1,
                useCORS: true,
                allowTaint: true,
                logging: false,
                width: chartElement.offsetWidth,
                height: chartElement.offsetHeight
            });
        } catch (firstError) {
            console.warn('First method failed, trying fallback approach:', firstError);

            try {
                // Method 2: Fallback with minimal options
                canvas = await html2canvas(chartElement, {
                    backgroundColor: '#ffffff',
                    logging: false
                });
            } catch (secondError) {
                console.error('Both chart capture methods failed:', secondError);
                alert('Gagal mengekspor chart ke PDF. Browser Anda mungkin tidak mendukung fitur ini.');
                return;
            }
        }

        const imgData = canvas.toDataURL('image/png');
        const doc = new jsPDF();

        const startY = addPDFHeader(doc, title);

        // Calculate image dimensions
        const imgWidth = 180;
        const imgHeight = (canvas.height * imgWidth) / canvas.width;

        // Add image to PDF
        doc.addImage(imgData, 'PNG', 15, startY, imgWidth, imgHeight);

        addPDFFooter(doc);
        doc.save(`${title.replace(/\s+/g, '-')}-Chart.pdf`);
    } catch (error) {
        console.error('Error generating chart PDF:', error);
        alert('Gagal mengekspor chart ke PDF. Silakan coba lagi atau gunakan browser yang berbeda.');
    }
};

// Export Complete Dashboard Report
export const exportDashboardPDF = async (
    alternatives: Alternative[],
    criteria: Criterion[],
    evaluations: Evaluation[],
    results: TopsisResult[]
) => {
    const doc = new jsPDF();
    let currentY = addPDFHeader(doc, 'Laporan Lengkap SPK TOPSIS');

    // Executive Summary
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Ringkasan Eksekutif', 20, currentY);
    currentY += 15;

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');

    const bestAlternative = results.sort((a, b) => a.rank - b.rank)[0];
    const summaryText = [
        `Sistem ini menganalisis ${alternatives.length} alternatif menggunakan ${criteria.length} kriteria.`,
        bestAlternative
            ? `Alternatif terbaik adalah "${bestAlternative.alternative.name}" dengan skor ${Number(bestAlternative.preference_score).toFixed(4)}.`
            : 'Belum ada hasil perhitungan TOPSIS.',
        `Total evaluasi yang dilakukan: ${evaluations.length} dari ${alternatives.length * criteria.length} kemungkinan.`,
        `Tingkat kelengkapan data: ${((evaluations.length / (alternatives.length * criteria.length)) * 100).toFixed(1)}%`
    ];

    summaryText.forEach(text => {
        doc.text(text, 20, currentY, { maxWidth: 170 });
        currentY += 15;
    });

    // Data Overview Tables
    currentY += 10;

    // Alternatives Summary
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Data Alternatif', 20, currentY);
    currentY += 10;

    const altTableData = alternatives.slice(0, 5).map((alt, index) => [
        index + 1,
        alt.name,
        alt.description || '-'
    ]);

    autoTable(doc, {
        head: [['No', 'Nama', 'Deskripsi']],
        body: altTableData,
        startY: currentY,
        theme: 'grid',
        styles: { fontSize: 8, cellPadding: 3 },
        headStyles: { fillColor: [59, 130, 246] },
        margin: { left: 20, right: 20 }
    });

    currentY = (doc as any).lastAutoTable?.finalY + 15;

    // Check if we need a new page
    if (currentY > 250) {
        doc.addPage();
        currentY = 20;
    }

    // Criteria Summary
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Data Kriteria', 20, currentY);
    currentY += 10;

    const critTableData = criteria.map((crit, index) => [
        index + 1,
        crit.name,
        (Number(crit.weight) * 100).toFixed(1) + '%',
        crit.type === 'benefit' ? 'Benefit' : 'Cost'
    ]);

    autoTable(doc, {
        head: [['No', 'Kriteria', 'Bobot', 'Tipe']],
        body: critTableData,
        startY: currentY,
        theme: 'grid',
        styles: { fontSize: 8, cellPadding: 3 },
        headStyles: { fillColor: [34, 197, 94] },
        margin: { left: 20, right: 20 }
    });

    currentY = (doc as any).lastAutoTable?.finalY + 15;

    // TOPSIS Results
    if (currentY > 200) {
        doc.addPage();
        currentY = 20;
    }

    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Hasil TOPSIS (Top 5)', 20, currentY);
    currentY += 10;

    const topResults = results.sort((a, b) => a.rank - b.rank).slice(0, 5);
    const resultsTableData = topResults.map((result) => [
        result.rank,
        result.alternative.name,
        Number(result.preference_score).toFixed(4)
    ]);

    autoTable(doc, {
        head: [['Rank', 'Alternatif', 'Skor']],
        body: resultsTableData,
        startY: currentY,
        theme: 'grid',
        styles: { fontSize: 8, cellPadding: 3 },
        headStyles: { fillColor: [239, 68, 68] },
        margin: { left: 20, right: 20 },
        didParseCell: function(data) {
            if (data.row.index === 0 && data.section === 'body') {
                data.cell.styles.fillColor = [254, 240, 138];
            }
        }
    });

    addPDFFooter(doc);
    doc.save('Laporan-Lengkap-SPK-TOPSIS.pdf');
};
